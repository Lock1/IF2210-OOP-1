


// Engimon
// Use #include <string>
// Need species database
class Engimon : public Entity {
    private:
        int EngimonID;
        string Name;
        string parentName; // TODO : Species (?)
        // ii.    Parent Names & Species
        // iii.    Skill/kemampuan(maksimal 4)
        ElementType engimonElement1;
        ElementType engimonElement2;
        int Level;
        int Experience;
        int CumulativeExperience;
        bool isWild;
        bool isMultiElement;
        string InteractionDescription;
    public:
        Engimon(int newID, string newName, string); // TODO : ??
        ~Engimon();

        bool move() override;
        bool xpGain(int gainedXP); // If Levelup -> return true, else false
        bool isMaxCXP(); // If over CumulativeExperience, return true
        void addSkill(Skill newSkill);
        bool deleteskill(Skill targetSkill);
        void randomMove(); // Random move, only wild pokemon
        string playerInteract(); // Print description, only non-wild pokemon
        // --- Const ---
        // 1. Minimal 1 species for every type and combination element
};



class Player : public Entity {
    private:
        Inventory<EngimonItem> EngimonInventory;
        Inventory<SkillItem> EngimonInventory; // TODO : ??
        Engimon *currentEngimon;
        Position lastPosition;

    public:
        Player();
        ~Player();
        void changeEngimon();
        bool move() override; // Overriding virtual move() Entity
        Position getLastPosition();
};

// Inventory <Template>
template<class T>
class Inventory {
    private:
        T *itemPtr;
        int currentCapacity;
        int maxCapacity;

    public:
        T *getItemList();
        bool addItem(); // False if overcapacity
        bool deleteItem(); // False if not found item
};






// EngimonInteraction -> // Virtual Class
// --- Attr ---
// i. Engimon 1*
// ii. Engimon 2*
//
//
// Breed : EngimonInteraction -> // Handled on engine
// --- Met ---
// 1. Engimon breedEngimon()
// // Element decider section
// // Get skill section, checking validity of element
//
//
// Battle : EngimonInteraction -> // Handled on engine
// --- Met ---
// 1. Battle constructor, need 2 engimon
// 2. void startFight() -> Calculate battle, no return
// 3. bool isEngimon1Win() -> returning whether first engimon win or not








class Item {
private:
    int ItemID;
public:
    virtual void useItem(); // TODO : Interaction with Inventory
};


class EngimonItem : public Item {
private:
    Engimon* EngimonPtr;

public:
    EngimonItem();
    ~EngimonItem();

    void useItem() override; TODO : (???)
};


// SkillItem : public Item ->
// --- Attr ---
// i. Item Count
// ii. Name
// --- Met ---
// // b.	Memiliki atribut jumlah. Dengan demikian, tidak boleh terdapat skill dengan nama yang berbeda dalam inventory.
// 1. useItem() TODO : (???)
